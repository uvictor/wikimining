package ch.ethz.las.wikimining.mr.influence;

import ch.ethz.las.wikimining.base.Fields;
import ch.ethz.las.wikimining.mr.utils.SetupHelper;
import java.io.IOException;
import java.util.Iterator;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.log4j.Logger;
import org.apache.mahout.math.VectorWritable;

/**
 * Removes duplicates (possibly) generated by TfIdfNovelty.
 *
 * @author Victor Ungureanu (uvictor@student.ethz.ch)
 */
public class TfIdfRemoveDuplicates extends Configured implements Tool {

  private static enum Records {

    TOTAL,
    DUPLICATES
  };

  private static class Reduce extends Reducer<
      Text, VectorWritable, Text, VectorWritable> {

    @Override
    public void reduce(
        Text docId, Iterable<VectorWritable> docs, Context context)
        throws IOException, InterruptedException {
      context.getCounter(Records.TOTAL).increment(1);

      Iterator<VectorWritable> it = docs.iterator();
      context.write(docId, it.next());

      if (it.hasNext()) {
        context.getCounter(Records.DUPLICATES).increment(1);
      }
    }
  }

  private static final Logger logger =
      Logger.getLogger(TfIdfRemoveDuplicates.class);

  private String inputPath;
  private String outputPath;

  public TfIdfRemoveDuplicates() { }

  @Override
  public int run(String[] args) throws Exception {
    final int ret = parseArgs(args);
    if (ret < 0) {
      return ret;
    }

    Job job = Job.getInstance(getConf());
    job.setJarByClass(TfIdfRemoveDuplicates.class);
    job.setJobName("Influence-TfIdfRemoveDuplicates");

    SetupHelper.getInstance()
        .setSequenceInput(job, inputPath)
        .setSequenceOutput(job, outputPath);

    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(VectorWritable.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(VectorWritable.class);

    // Identity Mapper
    job.setMapperClass(Mapper.class);
    job.setReducerClass(Reduce.class);

    // Delete the output directory if it exists already.
    FileSystem.get(getConf()).delete(new Path(outputPath), true);

    job.waitForCompletion(true);

    return 0;
  }

  @SuppressWarnings("static-access")
  private int parseArgs(String[] args) {
    Options options = new Options();
    options.addOption(OptionBuilder.withArgName("path").hasArg()
        .withDescription("Duplicate tfidf vectors").create(Fields.INPUT.get()));
    options.addOption(OptionBuilder.withArgName("path").hasArg()
        .withDescription("Unique tfidf vectors").create(Fields.OUTPUT.get()));

    CommandLine cmdline;
    CommandLineParser parser = new GnuParser();
    try {
      cmdline = parser.parse(options, args);
    } catch (ParseException exp) {
      System.err.println("Error parsing command line: " + exp.getMessage());
      return -1;
    }

    if (!cmdline.hasOption(Fields.INPUT.get())
        || !cmdline.hasOption(Fields.OUTPUT.get())) {
      HelpFormatter formatter = new HelpFormatter();
      formatter.printHelp(this.getClass().getName(), options);
      ToolRunner.printGenericCommandUsage(System.out);
      return -1;
    }

    inputPath = cmdline.getOptionValue(Fields.INPUT.get());
    outputPath = cmdline.getOptionValue(Fields.OUTPUT.get());

    logger.info("Tool name: " + this.getClass().getName());
    logger.info(" - input: " + inputPath);
    logger.info(" - output: " + outputPath);

    return 0;
  }

  public static void main(String[] args) throws Exception {
    ToolRunner.run(new TfIdfRemoveDuplicates(), args);
  }
}
